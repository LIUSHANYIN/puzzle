{"version":3,"sources":["components/Board/index.js","constant.js","App.js","serviceWorker.js","index.js"],"names":["Board","number","handleMoveBoard","index","blank","className","onClick","temp","initialArr","i","tile","id","push","checkArr","random","Math","floor","console","log","App","useState","position","setPosition","currentPosition","targetPosition","newArr","length","dis","checkWin","alert","map","pos","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6QAGe,SAASA,EAAT,GAAsD,IAAtCC,EAAqC,EAArCA,OAAOC,EAA8B,EAA9BA,gBAAgBC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,MAIxD,OACI,6BAEkB,IAAVH,GACI,yBAAKI,UAAU,UAKR,IAAXJ,GACI,4BAAQI,UAAU,KAAKC,QAAS,kBAAIJ,EAAgBC,EAAMC,KAASH,ICdvF,IAHA,IAEIM,EAFAC,EAAa,GAGRC,EAAI,EAAGA,EAFH,GAEeA,IAAK,CAC/B,IAAIC,EAAO,CAAEC,GAAIF,GACjBD,EAAWI,KAAKF,GAIlB,IAFA,IAAMG,EAAWL,EAERC,EAAI,EAAGA,EARH,GAQeA,IAAK,CAC/B,IAAIK,EAASC,KAAKC,MAAM,GAAAD,KAAKD,UAC7BP,EAAOC,EAAWM,GAClBN,EAAWM,GAAUN,EAAWC,GAChCD,EAAWC,GAAKF,EAIlBU,QAAQC,IAAIV,EAAYK,GCyDTM,MAlEf,WAAgB,IAAD,EACmBC,mBAASZ,GAD5B,mBACNa,EADM,KACIC,EADJ,KAGPpB,EAAkB,SAACqB,EAAiBC,GAExC,IADA,IAMIjB,EANEkB,EAAM,YAAOJ,GACVZ,EAAI,EAAGA,EAAIgB,EAAOC,OAAQjB,IACV,IAAnBY,EAASZ,GAAGE,KACda,EAAiBf,GAIrB,IAAIkB,EAAMJ,EAAkBC,EACxBD,EAAkBC,EACR,IAARG,GAAqB,IAARA,GACfpB,EAAOkB,EAAOD,GAAgBb,GAC9Bc,EAAOD,GAAgBb,GAAKc,EAAOF,GAAiBZ,GACpDc,EAAOF,GAAiBZ,GAAKJ,EAC7Be,EAAYG,GACZG,EAASP,EAAUR,IAEnBgB,MAAM,gCAGK,IAATF,IAAuB,IAATA,GAChBpB,EAAOkB,EAAOD,GAAgBb,GAC9Bc,EAAOD,GAAgBb,GAAKc,EAAOF,GAAiBZ,GACpDc,EAAOF,GAAiBZ,GAAKJ,EAC7Be,EAAYG,GACZG,EAASP,EAAUR,IAEnBgB,MAAM,gCAIND,EAAW,SAACP,EAAUR,GAC1B,GAAIQ,EAASK,SAAWb,EAASa,OAC/B,OAAO,EAEP,IAAK,IAAIjB,EAAI,EAAGA,EAAIY,EAASK,OAAQjB,IACnC,GAAIY,EAASZ,GAAGE,KAAOE,EAASJ,GAAGE,GACjC,OAAO,EAIb,OAAO,GAET,OACE,yBAAKN,UAAU,SACZgB,EAASS,KAAI,SAACC,EAAKtB,GAAN,OACZ,kBAAC,EAAD,CACEuB,IAAKvB,EACLP,gBAAiBA,EACjBD,OAAQ8B,EAAIpB,GACZR,MAAOM,OAGuB,IAAjCmB,EAASP,EAAUR,IAClB,yBAAKR,UAAU,OACb,+CACA,mDCvDU4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.0134c2be.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nexport default function Board({number,handleMoveBoard,index,blank}) {\n\n  \n    \n    return (\n        <div >\n            {\n                number ===0 &&(\n                    <div className='blank' ></div>\n\n                )\n            }\n            {\n                number !== 0 &&(\n                    <button className='bt' onClick={()=>handleMoveBoard(index,blank)}>{number}</button>\n\n                )\n            }\n        </div>\n    )\n}\n","let initialArr = [];\nlet length = 16;\nlet temp;\nfor (let i = 0; i < length; i++) {\n  let tile = { id: i };\n  initialArr.push(tile);\n}\nconst checkArr = initialArr;\n\nfor (let i = 0; i < length; i++) {\n  let random = Math.floor(Math.random() * (length - 1));\n  temp = initialArr[random];\n  initialArr[random] = initialArr[i];\n  initialArr[i] = temp;\n}\n\n\nconsole.log(initialArr, checkArr);\n\nexport  { initialArr, checkArr };\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\n\nimport Board from \"./components/Board\";\n\nimport { initialArr, checkArr } from \"./constant\";\n\nfunction App() {\n  const [position, setPosition] = useState(initialArr);\n\n  const handleMoveBoard = (currentPosition, targetPosition) => {\n    const newArr = [...position];\n    for (let i = 0; i < newArr.length; i++) {\n      if (position[i].id === 0) {\n        targetPosition = i;\n      }\n    }\n    let temp;\n    let dis = currentPosition - targetPosition;\n    if (currentPosition > targetPosition) {\n      if (dis === 1 || dis === 4) {\n        temp = newArr[targetPosition].id;\n        newArr[targetPosition].id = newArr[currentPosition].id;\n        newArr[currentPosition].id = temp;\n        setPosition(newArr);\n        checkWin(position, checkArr);\n      } else {\n        alert(\"This board can not be moved\");\n      }\n    } else {\n      if (dis === -1 || dis === -4) {\n        temp = newArr[targetPosition].id;\n        newArr[targetPosition].id = newArr[currentPosition].id;\n        newArr[currentPosition].id = temp;\n        setPosition(newArr);\n        checkWin(position, checkArr);\n      } else {\n        alert(\"This board can not be moved\");\n      }\n    }\n  };\n  const checkWin = (position, checkArr) => {\n    if (position.length !== checkArr.length) {\n      return false;\n    } else {\n      for (let i = 0; i < position.length; i++) {\n        if (position[i].id !== checkArr[i].id) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  return (\n    <div className=\"board\">\n      {position.map((pos, i) => (\n        <Board\n          key={i}\n          handleMoveBoard={handleMoveBoard}\n          number={pos.id}\n          index={i}\n        />\n      ))}\n      {checkWin(position, checkArr) === 1 && (\n        <div className=\"win\">\n          <h1>Congratulation!</h1>\n          <h2>You Win The Game</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}